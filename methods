

int highCard(card[] hand) {
	return Math.max( hand[0].digit , Math.max(
		Math.max(hand[1].digit, hand[2].digit) ,
		Math.max(hand[3].digit, hand[4].digit) ) );
}

int flush(card[] hand) {
	if (hand[0].suit == hand[1].suit &&
  	hand[1].suit == hand[2].suit &&
	  hand[2].suit == hand[3].suit &&
	  hand[3].suit == hand[4].suit)
		return 500;
	else
		return 0;
}

int straight(card[] hand) {
	int[] values = new int [5];
	for (int i=0; i<5; i++)
		values[i] = hand[i].digit;
	Array.sort(values);
	if (values[0] + 1 == values[1] &&
	  values[1] + 1 == values[2] &&
	  values[2] + 1 == values[3] &&
	  values[3] + 1 == values[4])
		return 400;
	else 
		return 0;
}
int checkHand(card[] hand){
  return max(checkPair(hand), highCard(hand) + flush(hand) + straight(hand));
}
int checkPair(card[] hand) {
if(hand[0].digit == hand[1].digit)
	return(hand[0].digit, hand[2].digit, hand[3].digit, hand[4].digit);
else if(hand[0].digit == hand[2].digit)
	return(hand[0].digit, hand[1].digit, hand[3].digit, hand[4].digit);
else if(hand[0].digit == hand[3].digit)
	return(hand[0].digit, hand[1].digit, hand[2].digit, hand[4].digit);
else if(hand[0].digit == hand[4].digit)
	return(hand[0].digit, hand[1].digit, hand[2].digit, hand[3].digit);
else if(hand[1].digit == hand[2].digit)
	return(hand[1].digit, hand[0].digit, hand[3].digit, hand[4].digit);
else if(hand[1].digit == hand[3].digit)
	return(hand[1].digit, hand[0].digit, hand[2].digit, hand[4].digit);
else if(hand[1].digit == hand[4].digit)
	return(hand[1].digit, hand[0].digit, hand[2].digit, hand[3].digit);
else if(hand[2].digit == hand[3].digit)
	return(hand[2].digit, hand[0].digit, hand[1].digit, hand[4].digit);
else if(hand[2].digit == hand[4].digit)
	return(hand[2].digit, hand[0].digit, hand[1].digit, hand[3].digit);
else if(hand[3].digit == hand[4].digit)
	return(hand[3].digit, hand[0].digit, hand[1].digit, hand[2].digit);
else
  return (0);
}

int checkThree(int pair, int card1, int card2, int card3){
  switch(pair){
    case card1 : return CheckFour(pair, card2, card3);
    case card2 : return CheckFour(pair, card1, card3);
    case card3 : return CheckFour(pair, card1, card2);
    default : return CheckTwoPair(pair, card1, card2, card3);
  }
}
int checkFour(int triple, int card1, int card2){
  if(triple==card1 || triple==card2)
    return (700 + triple)
  else 
    return fullHouse1(triple, card1, card2)
}
int checkTwoPair(int pair, int card1, int card2, int card3){
  if(card1==card2)
    return fullHouse2(pair, card1, card3);
  else if(card1==card3)
    return fullHouse2(pair, card1, card2);
  else if(card2==card3)
    return fullHouse2(pair, card2, card3);
  else 
    return (100 + pair);
}
int fullHouse1(int triple, int card1, int card2){
  if(card1==card2)
    return(600 + triple);
  else
    return(300 + triple);
}
int fullHouse2(int pair1, int pair2, card){
  if(pair1==card || pair2==card)
    return(600+card);
  else
    return(200 + max(pair1, pair2);
}


